var db = require('dbconnection').connection,
    crypto = require('crypto'),
    q = require('q'),
    debug = require('logs');
    generateSalt = function (length) {
        'use strict';
        return crypto.randomBytes(length).toString('hex');
    },
    hashPassword = function (password, salt) {
        'use strict';
        return crypto.createHash('sha256').update(password + salt, "utf8").digest('hex');
    },
    loggedUsers = {
        list: {},
        showList: function() {
            var i = 0;
            return JSON.stringify(this.list, function(key, value) {
                if(i !== 0) {
                    return value.username;
                }
                i += 1;
                return value;
            });
        }
    };


exports.user = function() {
    return {
        id: null,
        socket: null,
        username: null,
        register: function (login, password) {
            'use strict';

            var defered = q.defer(),
                salt = generateSalt(8),
                data = {
                    login: login,
                    password: hashPassword(password, salt),
                    salt: salt
                };
            db.query('INSERT INTO users SET ?', data, function (error, result) {
                if (error) {
                    defered.reject(new Error(error));
                } else {
                    defered.resolve(result.affectedRows);
                }
            });

            return defered.promise;
        },
        login: function (login, password, socket) {
            'use strict';
            var self = this,
                defered = q.defer();
                db.query('SELECT id FROM `users` WHERE `login` = ? AND `password` = SHA2(CONCAT(?, `salt`), 256)',
                    [login, password],
                    function (error, result) {
                        if (error) {
                            defered.reject(new Error(error));
                        } else {
                            if(result[0] === undefined) {
                                defered.reject(new Error('Incorrect login or password'));
                            } else {
                                defered.resolve(result[0].id);
                                if(loggedUsers.list[result[0].id] !== undefined) {
                                    debug.secure('User logged multiple times');
                                    self.logout(loggedUsers.list[result[0].id].socket);
                                }
                                self.id = result[0].id;
                                self.socket = socket;
                                self.username = login;
                                loggedUsers.list[result[0].id] = self;
                            }
                        }
                    });

            return defered.promise;
        },
        logout: function (socket) {
            socket.disconnect();
            delete loggedUsers.list[this.id];
            debug.secure('Logged out user: ' + this.id);
        }
    }
};

exports.loggedUsers = loggedUsers;