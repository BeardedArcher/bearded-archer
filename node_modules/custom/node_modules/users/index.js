var db = require('dbconnection').connection,
    crypto = require('crypto'),
    q = require('q'),
    debug = require('logs'),
    generateSalt = function (length) {
        'use strict';
        return crypto.randomBytes(length).toString('hex');
    },
    hashPassword = function (password, salt) {
        'use strict';
        return crypto.createHash('sha256').update(password + salt, "utf8").digest('hex');
    },
    loggedUsers = {
        list: {},
        showList: function () {
            'use strict';
            var i = 0;
            return JSON.stringify(this.list, function (key, value) {
                if (i !== 0) {
                    return value.username;
                }
                i += 1;
                return value;
            });
        }
    };


exports.user = function () {
    'use strict';
    return {
        id: null,
        socket: null,
        username: null,
        gold: null,
        exp: null,
        register: function (login, password) {
            var defered = q.defer(),
                salt = generateSalt(8),
                data = {
                    login: login,
                    password: hashPassword(password, salt),
                    salt: salt
                };
            db.query('INSERT INTO users SET ?', data, function (error, result) {
                if (error) {
                    defered.reject(new Error(error));
                } else {
                    defered.resolve(result.affectedRows);
                }
            });

            return defered.promise;
        },
        login: function (login, password, socket) {
            var self = this,
                defered = q.defer();

            this.logout(socket);
            db.query('SELECT id FROM `users` WHERE `login` = ? AND `password` = SHA2(CONCAT(?, `salt`), 256)',
                [login, password],
                function (error, result) {
                    if (error) {
                        defered.reject(new Error(error));
                    } else {
                        if (result[0] === undefined) {
                            defered.reject(new Error('Incorrect login or password'));
                        } else {
                            defered.resolve(result[0].id);
                            if (loggedUsers.list[result[0].id] !== undefined) {
                                debug.secure('User logged multiple times');
                                self.logout(loggedUsers.list[result[0].id].socket);
                            }
                            self.id = result[0].id;
                            self.socket = socket;
                            self.username = login;
                            loggedUsers.list[result[0].id] = self;
                        }
                    }
                });

            return defered.promise;
        },
        logout: function (socket) {
            if(this.id) {
                delete loggedUsers.list[this.id];
                debug.secure('Logged out user: ' + this.id);
            }
        },
        syncValues: function () {
            var self = this,
                defered = q.defer();
            if(this.id) {
                db.query('SELECT gold, exp FROM `users` WHERE `id` = ' + this.id, function(error, result) {
                    if (error) {
                        defered.reject(new Error(error));
                    } else {
                        if(result[0] === undefined) {
                            defered.reject(new Error('Can\'t find user in database'));
                        } else {
                            self.gold = result[0].gold,
                            self.exp = result[0].exp,
                            defered.resolve({
                                gold: result[0].gold,
                                exp: result[0].exp
                            });
                        }
                    }
                });
            }

            return defered.promise;
        },
        getEmitData: function(name) {
            switch (name) {
                case 'stats':
                    return {
                        gold: this.gold,
                        exp: this.exp
                    };
                break;
            }
        },
        isLogged: function() {
            return typeof(loggedUsers.list[this.id]) === 'object';
        }
    };
};

exports.loggedUsers = loggedUsers;